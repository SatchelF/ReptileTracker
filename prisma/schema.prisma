// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// id Int @id @default(autoincrement())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt

model User {
  id            Int        @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String     @unique
  password_hash String
  reptiles      Reptile[]
  schedules     Schedule[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum ReptileSpecies {
  ball_python
  king_snake
  corn_snake
  redtail_boa
}

enum ReptileSex {
  m
  f
}

// probably need to @onDelete(Cascade) for feedings, husbandryRecords, and schedules
model Reptile {
  id               Int               @id @default(autoincrement())
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  feedings         Feeding[]
  husbandryRecords HusbandryRecord[]
  schedules        Schedule[]
  species          ReptileSpecies
  name             String
  sex              ReptileSex
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Feeding {
  id        Int      @id @default(autoincrement())
  reptileId Int
  reptile   Reptile  @relation(fields: [reptileId], references: [id], onDelete: Cascade)
  foodItem  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HusbandryRecord {
  id          Int      @id @default(autoincrement())
  reptileId   Int
  reptile     Reptile  @relation(fields: [reptileId], references: [id], onDelete: Cascade)
  length      Float
  weight      Float
  temperature Float
  humidity    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ScheduleType {
  feed
  record
  clean
}

model Schedule {
  id          Int          @id @default(autoincrement())
  reptileId   Int
  reptile     Reptile      @relation(fields: [reptileId], references: [id], onDelete: Cascade)
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  type        ScheduleType
  description String
  monday      Boolean
  tuesday     Boolean
  wednesday   Boolean
  thursday    Boolean
  friday      Boolean
  saturday    Boolean
  sunday      Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
